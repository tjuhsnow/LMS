<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <condition/>
        <conditional>false</conditional>
        <name>LMS: Transform Learning Assignments to Requests</name>
        <run_as/>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period/>
        <run_start>2018-10-16 06:49:16</run_start>
        <run_time>1970-01-01 05:00:00</run_time>
        <run_type>on_demand</run_type>
        <script><![CDATA[gs.info("LMS: Starting scheduled job to create requests");
var errorLogMsg = "LMS: Scheduled job 'LMS: Transform Learning Assignments to Requests' error; message: ";
var itemSysId = gs.getProperty("x_thjuh_lms.catalog.item.sys_id");
var query = "type=item^completion_dateISNOTEMPTY^requested_item.numberISEMPTY";

processLearningAssignments();

function processLearningAssignments(){
	try{
		var broker;
		var ga = new GlideAggregate("x_thjuh_lms_learning_assignment");
		ga.addEncodedQuery(query);
		ga.addAggregate('COUNT', 'student');
		ga.groupBy('student');
		ga.query();
		while(ga.next()){
			//If student has valid user account, create/update requests with requested_for as student.user
			if(ga.student.user.getDisplayValue()){ 
				broker = requestBroker(ga.student.user.sys_id.toString(), ga.student.id.toString()); 
			}
			//If student has no valid user account, create/update requests with requested_for as service account
			else{
				broker = requestBroker(gs.getProperty("x_thjuh_lms.service.account.sys_id"), ga.student.id.toString()); 
			}
		}
	} 
	catch(ex){
		gs.error(errorLogMsg + ex + "at line " + ex.lineNumber);
	}
}

function requestBroker(reqFor, studentID){
	try{
		var utils = new x_thjuh_lms.utils();
		var request = {};
		var openRequest = checkForOpenRequest(reqFor, studentID); //Check for open LMS requests
		if(gs.nil(openRequest)){
			var newReq = utils.submitNewRequest(getItemsArrayForNewRequest(studentID), reqFor, request, studentID); //Create new request
		}
		else{
			var gr = new GlideRecord("x_thjuh_lms_learning_assignment");
			gr.addEncodedQuery(query);
			gr.addQuery("student.id", studentID);
			gr.query();
			while(gr.next()){
				gr.request = openRequest;
				gr.update();
				var gdt = new GlideDateTime();
				gdt.addSeconds(60);
				utils.addRitmToReq(openRequest, gs.getProperty("x_thjuh_lms.catalog.item.sys_id"), 1);
				gs.eventQueueScheduled("x_thjuh_lms.populate.vars.on.lms.ritm", gr, openRequest, gs.getUserID(), gdt);
			}
		}
	} 
	catch(ex){
		gs.error(errorLogMsg + ex + "at line " + ex.lineNumber);
	}
}

function checkForOpenRequest(reqFor, studentID){
	try{
		var sd = gs.getProperty("x_thjuh_lms.request.short.description") + " - " + studentID;
		var query = "active=true^requested_for.sys_id=" + reqFor + "^special_instructionsLIKE" + sd.toString() + "^ORDERBYDESCopened_at";
		var req = new GlideRecord('sc_request');
		req.addEncodedQuery(query);
		req.setLimit(1);
		req.query();
		if(req.next()){
			return req.sys_id.toString();
		}
		return null;
	} 
	catch(ex){
		gs.error(errorLogMsg + ex + "at line " + ex.lineNumber);
	}
}

function getItemsArrayForNewRequest(studentID){
	try{
		var items = [];
		var la = new GlideRecord("x_thjuh_lms_learning_assignment");
		la.addEncodedQuery(query);
		la.addQuery("student.id", studentID);
		la.query();
		while(la.next()){
			var item = {};
			item.variables = new x_thjuh_lms.utils().ritmVariables(la);
			item.sysparm_id = gs.getProperty("x_thjuh_lms.catalog.item.sys_id");
			item.sysparm_quantity = 1;
			items.push(item);
		}
		
		return items;
	} 
	catch(ex){
		gs.error(errorLogMsg + ex + "at line " + ex.lineNumber);
	}
}]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-10-16 06:50:00</sys_created_on>
        <sys_id>edc0b4b3db0d2300d61452b0cf9619b3</sys_id>
        <sys_mod_count>183</sys_mod_count>
        <sys_name>LMS: Transform Learning Assignments to Requests</sys_name>
        <sys_package display_value="LMS" source="x_thjuh_lms">f5f1298edb8163406d31892a48961967</sys_package>
        <sys_policy/>
        <sys_scope display_value="LMS">f5f1298edb8163406d31892a48961967</sys_scope>
        <sys_update_name>sysauto_script_edc0b4b3db0d2300d61452b0cf9619b3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-10-19 04:37:38</sys_updated_on>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
